"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _nodeFetch = _interopRequireWildcard(require("node-fetch"));

var _transform = _interopRequireDefault(require("@teamawesome/transform"));

var _default = function _default(superclass) {
  var _class, _temp;

  return _temp = _class =
  /*#__PURE__*/
  function (_superclass) {
    (0, _inherits2.default)(Delete, _superclass);

    function Delete() {
      (0, _classCallCheck2.default)(this, Delete);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Delete).apply(this, arguments));
    }

    (0, _createClass2.default)(Delete, [{
      key: "delete",

      /**
       * @type {Pipe}
       */

      /**
       * @param {number|Array<number>} ids
       */
      value: function _delete(ids) {
        return this.constructor.delete.call(ids, this);
      }
    }]);
    return Delete;
  }(superclass), (0, _defineProperty2.default)(_class, "delete", new _transform.default(del)), _temp;
}; // Delete is a reserved keyword


exports.default = _default;
var del = new _transform.default({
  ids: function ids(_ids) {
    return Array.isArray(_ids) ? _ids : [_ids];
  },
  url: function url(ids) {
    var _this$config$url = this.config.url,
        origin = _this$config$url.origin,
        pathname = _this$config$url.pathname;
    return new URL("".concat(origin).concat(pathname, "/").concat(this.endpoint, "/").concat(ids.join(';')));
  },
  request: function request(url) {
    var request = {
      method: 'DELETE',
      headers: {
        authorization: "basic ".concat(this.config.token),
        accept: 'application/json;charset=utf-8',
        'content-type': 'application/json;charset=utf-8'
      }
    };

    if (this.config.acceptLanguage) {
      request.headers['Accept-Language'] = this.config.acceptLanguage;
    }

    return new _nodeFetch.Request(url, request);
  },
  response: function response(request) {
    return (0, _nodeFetch.default)(request);
  },
  parse: function parse(response) {
    if (response.ok) {
      return null;
    }

    return response.json().then(function (data) {
      return Promise.reject(data);
    });
  }
});