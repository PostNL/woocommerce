"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Shipment = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _helpers = require("../../helpers");

var _client = _interopRequireDefault(require("../../client"));

var _create = _interopRequireDefault(require("../../action/create"));

var _delete = _interopRequireDefault(require("../../action/delete"));

var _get = _interopRequireDefault(require("../../action/get"));

var _deliveryType = require("../../constant/shipment/delivery-type");

var _search = _interopRequireDefault(require("../../action/search"));

var _update = _interopRequireDefault(require("../../action/update"));

var _shipment = _interopRequireDefault(require("../../schema/public/shipment"));

var _countriesSupportingMulticollo = require("../../constant/shipment/countries-supporting-multicollo");

var _packageType = require("../../constant/shipment/package-type");

var EPS_COUNTRIES = new Set(['AT', // Austria
'BE', // Belgium
'BG', // Bulgaria
'CZ', // Czech Republic
'DE', // Germany
'DK', // Denmark
'EE', // Estonia
'ES', // Spain
'FI', // Finland
'FR', // France
'GB', // United Kingdom
'GR', // Greece
'HU', // Hungary
'IE', // Ireland
'IT', // Italy
'LT', // Lithuania
'LU', // Luxembourg
'LV', // Latvia
'NL', // Netherlands
'PL', // Poland
'PT', // Portugal
'RO', // Romania
'SE', // Sweden
'SI', // Slovenia
'SK' // Slovakia
]);
var PACKAGE_TYPE_UNSTAMPED = 3;

var Shipment =
/*#__PURE__*/
function (_mixin) {
  (0, _inherits2.default)(Shipment, _mixin);

  function Shipment() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Shipment);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Shipment)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "endpoint", 'shipments');
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "namespace", 'shipments');
    return _this;
  }

  return Shipment;
}((0, _helpers.mixin)(_client.default, (0, _create.default)(_shipment.default.create), (0, _update.default)(_shipment.default.update), _delete.default, _get.default, _search.default));

exports.Shipment = Shipment;

function setContentType(args) {
  args.request.headers.set('Content-Type', 'application/vnd.shipment+json;charset=UTF-8;version=1.1'); // use version 1.1

  return args;
}

Shipment.create.insert('setContentType', setContentType, 'request');
Shipment.create.insert('shipmentClean', function (args) {
  args.data[this.namespace].forEach(function (shipment) {
    if (shipment.options.delivery_type === _deliveryType.PICKUP) {
      delete shipment.options.delivery_date;
    }

    if (EPS_COUNTRIES.has(shipment.recipient.cc) || shipment.options.package_type === PACKAGE_TYPE_UNSTAMPED) {
      delete shipment.customs_declaration;
    }

    if (shipment.options.package_type !== _packageType.PARCEL && shipment.options.package_type !== _packageType.PALLET || !shipment.secondary_shipments || Array.isArray(shipment.secondary_shipments) && shipment.secondary_shipments.length === 0 || !_countriesSupportingMulticollo.countriesSupportingMulticollo.includes(shipment.recipient.cc)) {
      delete shipment.secondary_shipments;
    }

    if (shipment.pickup === null) {
      delete shipment.pickup;
    }
  });
  return args;
}, 'clean');
Shipment.update.insert('setContentType', setContentType, 'request');
Shipment.update.insert('shipmentClean', function (args) {
  args.data[this.namespace].forEach(function (shipment) {
    if (shipment.options.delivery_type === _deliveryType.PICKUP) {
      delete shipment.options.delivery_date;
    }

    if (EPS_COUNTRIES.has(shipment.recipient.cc)) {
      delete shipment.customs_declaration;
    }

    if (shipment.options.package_type !== _packageType.PARCEL && shipment.options.package_type !== _packageType.PALLET || !shipment.secondary_shipments || Array.isArray(shipment.secondary_shipments) && shipment.secondary_shipments.length === 0 || !_countriesSupportingMulticollo.countriesSupportingMulticollo.includes(shipment.recipient.cc)) {
      delete shipment.secondary_shipments;
    }
  });
  return args;
}, 'clean');

function setCarrier(data) {
  data.data[this.namespace] = data.data[this.namespace].map(function (data) {
    data.carrier = data.carrier_id;
    return data;
  });
  return data;
}

Shipment.create.insert('setCarrier', setCarrier, 'structure');
Shipment.update.insert('setCarrier', setCarrier, 'structure');
(0, _helpers.addEndpoint)(Shipment, 'shipment');