"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var create = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  $id: 'shipment_create',
  type: 'object',
  required: ['data'],
  additionalProperties: false,
  properties: {
    data: {
      type: 'object',
      additionalProperties: false,
      required: ['shipments'],
      properties: {
        shipments: {
          type: 'array',
          minItems: 1,
          items: {
            type: 'object',
            additionalProperties: false,
            required: ['carrier'],
            properties: {
              secondary_shipments: {
                type: 'array',
                minItems: 1,
                items: {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    physical_properties: {
                      type: 'object',
                      additionalProperties: false,
                      required: ['weight'],
                      properties: {
                        weight: {
                          type: 'integer',
                          minimum: 0
                        },
                        height: {
                          type: 'integer'
                        },
                        width: {
                          type: 'integer'
                        },
                        length: {
                          type: 'integer'
                        },
                        volume: {
                          type: 'integer'
                        }
                      }
                    },
                    options: {
                      type: 'object',
                      additionalProperties: false,
                      options: ['package_type'],
                      properties: {
                        package_type: {
                          type: 'integer',
                          enum: [1, 2, 3]
                        },
                        only_recipient: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        signature: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        return: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        insurance: {
                          allOf: [{
                            $ref: 'shared#/definitions/price'
                          }, {
                            properties: {
                              amount: {
                                max: 500000
                              }
                            }
                          }]
                        },
                        large_format: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        age_check: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        cooled_delivery: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        saturday_delivery: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        label_description: {
                          type: 'string',
                          maxLength: 45
                        },
                        delivery_type: {
                          type: ['number', 'null'],
                          enum: [1, 2, 3, 4, 5, null],
                          description: 'if delivery_type is not 2 then delivery_date is required. 1: morning, 2: standard, 3: evening, 4: pickup, 5: express delivery'
                        },
                        delivery_date: {
                          anyOf: [{
                            type: 'null'
                          }, {
                            $ref: 'shared#/definitions/date-time'
                          }]
                        }
                      }
                    }
                  }
                }
              },
              account_id: {
                type: 'integer'
              },
              shop_id: {
                type: 'integer'
              },
              reference_identifier: {
                type: 'string',
                maxLength: 255,
                pattern: '^[^=\\?]*$'
              },
              recipient: {
                type: 'object',
                additionalProperties: false,
                required: ['cc', 'city', 'street', 'number', 'person'],
                properties: {
                  cc: {
                    type: 'string',
                    minLength: 2,
                    maxLength: 2
                  },
                  region: {
                    type: 'string',
                    maxLength: 35
                  },
                  postal_code: {
                    type: 'string',
                    maxLength: 10
                  },
                  city: {
                    type: 'string',
                    maxLength: 35,
                    minLength: 1
                  },
                  street: {
                    type: 'string',
                    maxLength: 40,
                    minLength: 1
                  },
                  street_additional_info: {
                    type: 'string',
                    maxLength: 50
                  },
                  number: {
                    type: 'string',
                    maxLength: 8
                  },
                  number_suffix: {
                    type: 'string',
                    maxLength: 4
                  },
                  box_number: {
                    type: 'string',
                    maxLength: 8
                  },
                  area: {
                    type: 'string',
                    maxLength: 35
                  },
                  person: {
                    type: 'string',
                    maxLength: 50,
                    minLength: 1
                  },
                  company: {
                    type: 'string',
                    maxLength: 50
                  },
                  email: {
                    anyOf: [{
                      type: 'string',
                      format: 'email'
                    }, {
                      type: 'string',
                      maxLength: 0
                    }]
                  },
                  phone: {
                    type: 'string',
                    maxLength: 25
                  }
                }
              },
              physical_properties: {
                type: 'object',
                additionalProperties: false,
                required: ['weight'],
                properties: {
                  weight: {
                    type: 'integer',
                    minimum: 0
                  },
                  height: {
                    type: 'integer'
                  },
                  width: {
                    type: 'integer'
                  },
                  length: {
                    type: 'integer'
                  },
                  volume: {
                    type: 'integer'
                  }
                }
              },
              options: {
                type: 'object',
                additionalProperties: false,
                options: ['package_type'],
                properties: {
                  package_type: {
                    type: 'integer',
                    enum: [1, 2, 3]
                  },
                  only_recipient: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  signature: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  return: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  insurance: {
                    allOf: [{
                      $ref: 'shared#/definitions/price'
                    }, {
                      properties: {
                        amount: {
                          max: 500000
                        }
                      }
                    }]
                  },
                  large_format: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  age_check: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  cooled_delivery: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  saturday_delivery: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  label_description: {
                    type: 'string',
                    maxLength: 45
                  },
                  delivery_type: {
                    type: ['number', 'null'],
                    enum: [1, 2, 3, 4, 5, null],
                    description: 'if delivery_type is not 2 then delivery_date is required. 1: morning, 2: standard, 3: evening, 4: pickup, 5: express delivery'
                  },
                  delivery_date: {
                    anyOf: [{
                      type: 'null'
                    }, {
                      $ref: 'shared#/definitions/date-time'
                    }]
                  }
                }
              },
              customs_declaration: {
                type: 'object',
                additionalProperties: false,
                required: ['contents', 'weight', 'items'],
                properties: {
                  contents: {
                    type: 'integer',
                    enum: [1, 2, 3, 4, 5],
                    description: '1: commercial goods, 2: commercial sample, 3: documents, 4: gift, 5: returned goods'
                  },
                  invoice: {
                    type: 'string'
                  },
                  weight: {
                    type: 'integer'
                  },
                  items: {
                    type: 'array',
                    minItems: 1,
                    maxItems: 5,
                    items: {
                      type: 'object',
                      required: ['description', 'amount', 'weight', 'item_value', 'classification'],
                      properties: {
                        description: {
                          type: 'string',
                          maxLength: 50
                        },
                        amount: {
                          type: 'integer',
                          minimum: 1
                        },
                        weight: {
                          type: 'integer'
                        },
                        item_value: {
                          $ref: 'shared#/definitions/price'
                        },
                        classification: {
                          type: 'string'
                        },
                        country: {
                          type: 'string',
                          pattern: '^[A-Z]{2}$'
                        }
                      }
                    }
                  }
                }
              },
              carrier: {
                type: 'integer',
                enum: [1, 2]
              },
              pickup: {
                type: 'object',
                additionalProperties: false,
                pickup: ['postal_code', 'location_name', 'city', 'street', 'number'],
                properties: {
                  postal_code: {
                    type: 'string'
                  },
                  location_name: {
                    type: 'string'
                  },
                  city: {
                    type: 'string'
                  },
                  street: {
                    type: 'string'
                  },
                  number: {
                    type: 'string'
                  },
                  number_suffix: {
                    type: 'string'
                  },
                  box_number: {
                    type: 'string',
                    maxLength: 8
                  },
                  region: {
                    type: 'string',
                    maxLength: 35
                  },
                  cc: {
                    type: 'string'
                  },
                  location_code: {
                    type: 'string'
                  },
                  retail_network_id: {
                    type: 'string'
                  }
                }
              },
              'multi-colli': {
                type: 'object',
                additionalProperties: false,
                required: ['amount'],
                properties: {
                  amount: {
                    type: 'integer'
                  }
                }
              },
              note: {
                type: 'string'
              },
              status: {
                type: 'integer',
                enum: [1, 2, 3, 4, 5, 6, 7, 8]
              },
              general_settings: {
                type: 'object',
                additionalProperties: false,
                properties: {
                  save_recipient_address: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  }
                }
              },
              collection_contact: {
                type: 'object',
                additionalProperties: false,
                required: ['cc', 'city', 'company', 'email', 'last_name', 'number', 'phone', 'postal_code', 'street'],
                properties: {
                  cc: {
                    type: 'string',
                    minLength: 2,
                    maxLength: 2
                  },
                  city: {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                  },
                  company: {
                    type: ['string']
                  },
                  email: {
                    type: 'string',
                    format: 'email'
                  },
                  first_name: {
                    type: 'string'
                  },
                  gender: {
                    type: 'string',
                    enum: ['mr', 'mrs']
                  },
                  last_name: {
                    type: 'string'
                  },
                  number: {
                    type: ['string', 'integer'],
                    minLength: 1
                  },
                  number_suffix: {
                    type: ['string', 'null']
                  },
                  phone: {
                    type: 'string',
                    minLength: 8
                  },
                  postal_code: {
                    type: 'string',
                    minLength: 1
                  },
                  street: {
                    type: 'string',
                    minLength: 1
                  },
                  street_additional_info: {
                    type: ['string', 'null']
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
var update = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  $id: 'shipment_update',
  type: 'object',
  required: ['data'],
  additionalProperties: false,
  properties: {
    data: {
      type: 'object',
      additionalProperties: false,
      required: ['shipments'],
      properties: {
        shipments: {
          type: 'array',
          minItems: 1,
          items: {
            type: 'object',
            additionalProperties: false,
            required: ['id', 'carrier', 'recipient'],
            properties: {
              secondary_shipments: {
                type: 'array',
                minItems: 1,
                items: {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    id: {
                      type: 'integer'
                    },
                    physical_properties: {
                      type: 'object',
                      additionalProperties: false,
                      required: ['weight'],
                      properties: {
                        weight: {
                          type: 'integer',
                          minimum: 0
                        },
                        height: {
                          type: 'integer'
                        },
                        width: {
                          type: 'integer'
                        },
                        length: {
                          type: 'integer'
                        },
                        volume: {
                          type: 'integer'
                        }
                      }
                    },
                    options: {
                      type: 'object',
                      additionalProperties: false,
                      options: ['package_type'],
                      properties: {
                        package_type: {
                          type: 'integer',
                          enum: [1, 2, 3]
                        },
                        only_recipient: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        signature: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        return: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        insurance: {
                          allOf: [{
                            $ref: 'shared#/definitions/price'
                          }, {
                            properties: {
                              amount: {
                                max: 500000
                              }
                            }
                          }]
                        },
                        large_format: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        age_check: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        cooled_delivery: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        saturday_delivery: {
                          type: 'integer',
                          minimum: 0,
                          maximum: 1
                        },
                        label_description: {
                          type: 'string',
                          maxLength: 45
                        },
                        delivery_type: {
                          type: ['number', 'null'],
                          enum: [1, 2, 3, 4, 5, null],
                          description: 'if delivery_type is not 2 then delivery_date is required. 1: morning, 2: standard, 3: evening, 4: pickup, 5: express delivery'
                        },
                        delivery_date: {
                          anyOf: [{
                            type: 'null'
                          }, {
                            $ref: 'shared#/definitions/date-time'
                          }]
                        }
                      }
                    }
                  }
                }
              },
              id: {
                type: 'integer'
              },
              account_id: {
                type: 'integer'
              },
              shop_id: {
                type: 'integer'
              },
              reference_identifier: {
                type: 'string',
                maxLength: 255,
                pattern: '^[^=\\?]*$'
              },
              recipient: {
                type: 'object',
                additionalProperties: false,
                required: ['cc', 'city', 'street', 'number', 'person'],
                properties: {
                  cc: {
                    type: 'string',
                    minLength: 2,
                    maxLength: 2
                  },
                  region: {
                    type: 'string',
                    maxLength: 35
                  },
                  postal_code: {
                    type: 'string',
                    maxLength: 10
                  },
                  city: {
                    type: 'string',
                    maxLength: 35,
                    minLength: 1
                  },
                  street: {
                    type: 'string',
                    maxLength: 40,
                    minLength: 1
                  },
                  street_additional_info: {
                    type: 'string',
                    maxLength: 50
                  },
                  number: {
                    type: 'string',
                    maxLength: 8
                  },
                  number_suffix: {
                    type: 'string',
                    maxLength: 4
                  },
                  box_number: {
                    type: 'string',
                    maxLength: 8
                  },
                  area: {
                    type: 'string',
                    maxLength: 35
                  },
                  person: {
                    type: 'string',
                    maxLength: 50,
                    minLength: 1
                  },
                  company: {
                    type: 'string',
                    maxLength: 50
                  },
                  email: {
                    anyOf: [{
                      type: 'string',
                      format: 'email'
                    }, {
                      type: 'string',
                      maxLength: 0
                    }]
                  },
                  phone: {
                    type: 'string',
                    maxLength: 25
                  }
                }
              },
              physical_properties: {
                type: 'object',
                additionalProperties: false,
                required: ['weight'],
                properties: {
                  weight: {
                    type: 'integer',
                    minimum: 0
                  },
                  height: {
                    type: 'integer'
                  },
                  width: {
                    type: 'integer'
                  },
                  length: {
                    type: 'integer'
                  },
                  volume: {
                    type: 'integer'
                  }
                }
              },
              options: {
                type: 'object',
                additionalProperties: false,
                options: ['package_type'],
                properties: {
                  package_type: {
                    type: 'integer',
                    enum: [1, 2, 3]
                  },
                  only_recipient: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  signature: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  age_check: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  return: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  insurance: {
                    allOf: [{
                      $ref: 'shared#/definitions/price'
                    }, {
                      properties: {
                        amount: {
                          max: 500000
                        }
                      }
                    }]
                  },
                  large_format: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  cooled_delivery: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  saturday_delivery: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  },
                  label_description: {
                    type: 'string',
                    maxLength: 45
                  },
                  delivery_type: {
                    type: ['number', 'null'],
                    enum: [1, 2, 3, 4, 5, null],
                    description: 'if delivery_type is not 2 then delivery_date is required. 1: morning, 2: standard, 3: evening, 4: pickup, 5: express delivery'
                  },
                  delivery_date: {
                    type: ['string', 'null'],
                    pattern: '([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})'
                  }
                }
              },
              customs_declaration: {
                type: 'object',
                additionalProperties: false,
                required: ['contents', 'weight', 'items'],
                properties: {
                  contents: {
                    type: 'integer',
                    enum: [1, 2, 3, 4, 5],
                    description: '1: commercial goods, 2: commercial sample, 3: documents, 4: gift, 5: returned goods'
                  },
                  invoice: {
                    type: 'string'
                  },
                  weight: {
                    type: 'integer'
                  },
                  items: {
                    type: 'array',
                    minItems: 1,
                    maxItems: 5,
                    items: {
                      type: 'object',
                      required: ['description', 'amount', 'weight', 'item_value', 'classification'],
                      properties: {
                        description: {
                          type: 'string',
                          maxLength: 50
                        },
                        amount: {
                          type: 'integer',
                          minimum: 1
                        },
                        weight: {
                          type: 'integer'
                        },
                        item_value: {
                          $ref: 'shared#/definitions/price'
                        },
                        classification: {
                          type: 'string'
                        },
                        country: {
                          type: 'string',
                          pattern: '^[A-Z]{2}$'
                        }
                      }
                    }
                  }
                }
              },
              carrier: {
                type: 'integer',
                enum: [1, 2]
              },
              pickup: {
                type: 'object',
                additionalProperties: false,
                pickup: ['postal_code', 'location_name', 'city', 'street', 'number'],
                properties: {
                  postal_code: {
                    type: 'string'
                  },
                  location_name: {
                    type: 'string'
                  },
                  city: {
                    type: 'string'
                  },
                  street: {
                    type: 'string'
                  },
                  number: {
                    type: 'string'
                  },
                  number_suffix: {
                    type: 'string'
                  },
                  box_number: {
                    type: 'string',
                    maxLength: 8
                  },
                  region: {
                    type: 'string',
                    maxLength: 35
                  },
                  cc: {
                    type: 'string'
                  },
                  location_code: {
                    type: 'string'
                  },
                  retail_network_id: {
                    type: 'string'
                  }
                }
              },
              'multi-colli': {
                type: 'object',
                additionalProperties: false,
                required: ['amount'],
                properties: {
                  amount: {
                    type: 'integer'
                  }
                }
              },
              note: {
                type: 'string'
              },
              status: {
                type: 'integer',
                enum: [1, 2, 3, 4, 5, 6, 7, 8]
              },
              general_settings: {
                type: 'object',
                additionalProperties: false,
                properties: {
                  save_recipient_address: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 1
                  }
                }
              },
              collection_contact: {
                type: 'object',
                additionalProperties: false,
                required: ['cc', 'city', 'number', 'phone', 'postal_code', 'street'],
                properties: {
                  cc: {
                    type: 'string',
                    minLength: 2,
                    maxLength: 2
                  },
                  city: {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                  },
                  company: {
                    type: ['string', 'null']
                  },
                  email: {
                    type: 'string',
                    format: 'email'
                  },
                  first_name: {
                    type: 'string'
                  },
                  gender: {
                    type: 'string',
                    enum: ['mr', 'mrs']
                  },
                  last_name: {
                    type: 'string'
                  },
                  number: {
                    type: ['string', 'integer'],
                    minLength: 1
                  },
                  number_suffix: {
                    type: ['string', 'null']
                  },
                  phone: {
                    type: 'string',
                    minLength: 8
                  },
                  postal_code: {
                    type: 'string',
                    minLength: 1
                  },
                  street: {
                    type: 'string',
                    minLength: 1
                  },
                  street_additional_info: {
                    type: ['string', 'null']
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
var _default = {
  create: create,
  update: update
};
exports.default = _default;